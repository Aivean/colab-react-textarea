{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","App","props","window","google","colab","kernel","invokeFunction","fname","args","a","data","state","value","ref","React","createRef","className","style","width","rows","onKeyDown","evt","shiftKey","keyCode","ctrlKey","resultProm","setState","loading","then","result","console","log","text","current","focus","preventDefault","stopPropagation","disabled","this","onChange","e","currentTarget","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIA,SAASA,EAAMC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,IAoFvCI,E,kDAhFX,WAAYC,GAAQ,IAAD,6BACf,cAAMA,GAEDC,OAAOC,SACRD,OAAOC,OAAS,CACZC,MAAO,CACHC,OAAQ,CACJC,eAAe,WAAD,4BAAE,WAAOC,EAAOC,GAAd,SAAAC,EAAA,sEACNd,EAAM,KADA,gCAGL,CACHe,KAAM,CACF,mBAAoB,CAChB,OAAUF,EAAK,GAAK,YANpB,2CAAF,qDAAC,OAgB/B,EAAKG,MAAQ,CACTC,MAAO,GAMPC,IAAKC,IAAMC,aA9BA,E,0CAmCnB,WAAU,IAAD,OACL,OACI,qBAAKC,UAAU,MAAf,SAEI,cAAC,IAAD,CACIC,MAAO,CAAEC,MAAM,QACfC,KAAM,GACNC,UAAW,SAACC,GACR,GAAIA,EAAIC,UAA4B,IAAhBD,EAAIE,SACpBF,EAAIG,SAA0B,IAAfH,EAAIE,QAAe,CAElC,IAAME,EAAavB,OAAOC,OAAOC,MAAMC,OAAOC,eAC1C,kBACA,CAAC,EAAKK,MAAMC,OACZ,IAEJ,EAAKc,SAAS,CAACC,SAAS,IAExBF,EAAWG,MAAK,SAAAC,GACZC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EAAOnB,KAAK,oBACzB,EAAKgB,SAAS,CACVC,SAAS,EACTf,MAAOoB,EAAKH,SACb,WACC,EAAKlB,MAAME,IAAIoB,SAAW,EAAKtB,MAAME,IAAIoB,QAAQC,cAIzDb,EAAIc,iBACJd,EAAIe,oBAGZC,SAAWC,KAAK3B,MAAMgB,QACtBf,MAAO0B,KAAK3B,MAAMC,MAClB2B,SAAU,SAAAC,GAAC,OAAI,EAAKd,SAAS,CAACd,MAAO4B,EAAEC,cAAc7B,SACrD8B,YAAY,yBACZ7B,IAAKyB,KAAK3B,MAAME,Y,GAzElBC,IAAM6B,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,gBAM1BZ,M","file":"static/js/main.dcaf4392.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\nimport TextareaAutosize from \"react-autosize-textarea\";\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (!window.google) {\n            window.google = {\n                colab: {\n                    kernel: {\n                        invokeFunction: async (fname, args) => {\n                            await sleep(1000)\n\n                            return {\n                                data: {\n                                    'application/json': {\n                                        'result': args[0] + \" test\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        this.state = {\n            value: '',\n            /*\n              Saving the \"ref\" in the state is a bad practice: you should use a `const` or a class property.\n              We're doing it as it's the only way we have to avoid\n              resetting it to \"React.createRef()\" at every render\n            */\n            ref: React.createRef()\n        };\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <TextareaAutosize\n                    style={{ width:\"100%\" }}\n                    rows={10}\n                    onKeyDown={(evt) => {\n                        if (evt.shiftKey && evt.keyCode === 9 ||\n                            evt.ctrlKey && evt.keyCode == 32) {\n\n                            const resultProm = window.google.colab.kernel.invokeFunction(\n                                'notebook.Concat', // The callback name.\n                                [this.state.value], // The arguments.\n                                {}); // kwargs\n\n                            this.setState({loading: true})\n\n                            resultProm.then(result => {\n                                console.log(result)\n                                const text = result.data['application/json'];\n                                this.setState({\n                                    loading: false,\n                                    value: text.result\n                                }, () => {\n                                    this.state.ref.current && this.state.ref.current.focus()\n                                })\n                            })\n\n                            evt.preventDefault()\n                            evt.stopPropagation()\n                        }\n                    }}\n                    disabled ={this.state.loading}\n                    value={this.state.value}\n                    onChange={e => this.setState({value: e.currentTarget.value})}\n                    placeholder=\"try writing some lines\"\n                    ref={this.state.ref}\n                />\n                {/*{this.state.ref.current && <div>The textarea contains: {this.state.ref.current.value}</div>}*/}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('output-area')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}